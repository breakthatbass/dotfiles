#!/usr/bin/env python3
#
# display amount of free and used memory
#
# usage: pee [-gmkb] (run `pee -h' for more usage`)


from psutil import virtual_memory, swap_memory
from argparse import ArgumentParser
import sys
import time
import os


def metric_info(flag):
    '''get appropriate number for math for metric based on flag'''
    m = 0
    if flag == 'b':
        m = 1
        return m
    metrics = {
            'gb': 1073741824,
            'kb': 1024,
            'mb': 1048576
            }
    if flag not in metrics.keys():
        print("problem with metric")
        exit(1)
    else:
        m = metrics.get(flag)
    return m


def vm_metrics(item, m):
    '''do the math for the appropriate metric'''
    try:
        if m == 1: # if measured in bytes, return without decimals
            result = item/m
            return int(result)
        elif m == 1073741824: # if GB, return with 2 decimal places
            result  = round(item/m,2)
            return result
        else:
            result = round(item/m)
            return result
    except:
        return None


def print_info(metric, unit, mem, swap):
    '''print info about virtual memory based on flag'''
    # MEM info
    s = ''
    s += "Mem\n"
    total = vm_metrics(mem.total, metric)
    used = vm_metrics(mem.used, metric)
    free = vm_metrics(mem.free, metric)
    available = vm_metrics(mem.available, metric)
    
    s += f"\ttotal: {used} {unit}\n"
    s += f"\tused: {used} {unit}\n"
    s += f"\tfree: {free} {unit}\n"
    s += f"\tavailable: {available} {unit}\n"

    # SWAP info
    s += "\nSwap:\n"
    total = vm_metrics(swap.total, metric)
    used = vm_metrics(swap.used, metric)
    free = vm_metrics(swap.free, metric)

    s += f"\ttotal: {total} {unit}\n"
    s += f"\tused: {used} {unit}\n"
    s += f"\tfree: {free} {unit}\n"

    return s

def main():

    ap = ArgumentParser(description="Display amount of free and used memory in the system")
    ap.add_argument("-g", "--gigabytes", action="store_true", 
            help="display memory info in gigabytes")
    ap.add_argument("-m", "--megabytes", action="store_true",
            help="display memory info in megabytes")
    ap.add_argument("-k", "--kilobytes", action="store_true",
            help="display memory info in kilobytes")
    ap.add_argument("-b", "--bytes", action="store_true",
            help="display memory info in bytes")
    ap.add_argument("-V", "--version", action="store_true", 
            help="display version info")
    ap.add_argument("-s", "--sustain", action="store_true", 
            help="keep checking system periodically")

    args = ap.parse_args()

    ####### only allow one flag at a time
    true_count = 0
    vals = vars(args)

    for i in vals.values():
        if i == True and i != '-s':
            true_count+=1
    
    if true_count > 1:
        print("only one argument at a time")
        exit(1)
    
    symb = ''
    metric = ''


    if args.gigabytes:
        metric = 'gb'
        symb = "GB"

    elif args.megabytes:
        metric = 'mb'
        symb =  "MB" 
    
    elif args.kilobytes:
        metric = 'kb'
        symb = 'KB'
    
    elif args.bytes:
        metric = 'b'

    elif args.version:
        print(version_info)
    
    else: # show in bytes by default
        metric = 'b'


    while True:
        try:
          os.system('clear')
          memt = virtual_memory()
          swapt = swap_memory()
          s = print_info(metric_info(metric), symb, memt, swapt)
          print(s)
          time.sleep(1)
        except KeyboardInterrupt:
          sys.exit(0)


if __name__ == '__main__':
    main()
