#!/usr/bin/env python3

'''
created by: taylor gamache
date: 10/28/21

script to compile and run java programs more quickly

usage: 
compiling: ./jvm file.java -l
running:   ./jvm -r file -l

file.java  -> file to be compiled
-l/--lib   -> compile with algs4 library (optional)
-r/--run   -> run file
-q/--quick -> compile file and then run
'''

import os
import sys
from argparse import ArgumentParser

JC = 'javac'
JR = 'java'
JC_ALGS4_LIB = 'javac-algs4'	# compile with lib
JR_ALGS4_LIB = 'java-algs4'	# run with lib

arg_ = ''


def get_jvm_cmd(file, lib=False):
	assert (os.path.exists(file)), f'ERROR: {file} not found'
	if lib:
		return f'{JC_ALGS4_LIB} {file}'
	else:
		return f'{JC} {file}'


def get_run_cmd(file, lib=False):
	'''attempt to run compiled java program'''
	compiled_file = f'{file}.class'
	assert (os.path.exists(compiled_file)), f'ERROR: {file} not found'
	if lib:
		return f'{JR_ALGS4_LIB} {file} {arg_}'
	else:
		return f'{JR} {file} {arg_}'

def get_cmp_and_run_cmd(file, lib=False):
	'''attempt to compile and then run a java program'''
	# get command to compile and attempt at compilation
	cmp_cmd = get_jvm_cmd(file, lib)
	
	# if compilation fails, don't try to run anything
	errno = os.waitstatus_to_exitcode(os.system(cmp_cmd))
	if errno:
		sys.exit(errno)

	# remove .java from end of file
	new_file = os.path.splitext(file)[0]

	# attempt to run
	run_cmd = get_run_cmd(new_file, lib)
	os.system(run_cmd)


def main():
	global arg_

	a = ArgumentParser(description='script to compile/run java programs')
	a.add_argument('--lib',
				   '-l', action='store_true',
				   help='compile with the algs4 lib')
	a.add_argument('--run', '-r', 
				   action='store_true', 
				   help='run a compiled java program')
	a.add_argument('--quick', '-q',
				   action='store_true',
				   help='attempt to comile and run a java program')
	a.add_argument('--arg', '-a',
                   help='provide a command line argument')
	a.add_argument('file', help='file to be compiled/run')
	

	res = a.parse_args()

	if res.run and res.quick:
		res.run = False

	if res.arg:
		arg_ = res.arg

	if res.run:
		cmd = get_run_cmd(res.file, res.lib)
		os.system(cmd)
	elif res.quick:
		get_cmp_and_run_cmd(res.file, res.lib)
	else:
		cmd = get_jvm_cmd(res.file, res.lib)
		os.system(cmd)

if __name__ == '__main__':
	main()
